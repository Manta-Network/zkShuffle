//
// Copyright 2017 Christian Reitwiessner
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
// 2019 OKIMS
//      ported to solidity 0.6
//      fixed linter warnings
//      added requiere error messages
//
// 2021 Remco Bloemen
//       cleaned up code
//       added InvalidProve() error
//       always revert with InvalidProof() on invalid proof
//       make Shuffle_encryptPairing_30card strict
//
// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.4 || ^0.8.17;

library Shuffle_encryptPairing_30card {
  error InvalidProof();

  // The prime q in the base field F_q for G1
  uint256 constant BASE_MODULUS = 21888242871839275222246405745257275088696311157297823662689037894645226208583;

  // The prime moludus of the scalar field of G1.
  uint256 constant SCALAR_MODULUS = 21888242871839275222246405745257275088548364400416034343698204186575808495617;

  struct G1Point {
    uint256 X;
    uint256 Y;
  }

  // Encoding of field elements is: X[0] * z + X[1]
  struct G2Point {
    uint256[2] X;
    uint256[2] Y;
  }

  /// @return the generator of G1
  function P1() internal pure returns (G1Point memory) {
    return G1Point(1, 2);
  }

  /// @return the generator of G2
  function P2() internal pure returns (G2Point memory) {
    return
      G2Point(
        [
          11559732032986387107991004021392285783925812861821192530917403151452391805634,
          10857046999023057135944570762232829481370756359578518086990519993285655852781
        ],
        [
          4082367875863433681332203403145435568316851327593401208105741076214120093531,
          8495653923123431417604973247489272438418190587263600148770280649306958101930
        ]
      );
  }

  /// @return r the negation of p, i.e. p.addition(p.negate()) should be zero.
  function negate(G1Point memory p) internal pure returns (G1Point memory r) {
    if (p.X == 0 && p.Y == 0) return G1Point(0, 0);
    // Validate input or revert
    if (p.X >= BASE_MODULUS || p.Y >= BASE_MODULUS) revert InvalidProof();
    // We know p.Y > 0 and p.Y < BASE_MODULUS.
    return G1Point(p.X, BASE_MODULUS - p.Y);
  }

  /// @return r the sum of two points of G1
  function addition(G1Point memory p1, G1Point memory p2) internal view returns (G1Point memory r) {
    // By EIP-196 all input is validated to be less than the BASE_MODULUS and form points
    // on the curve.
    uint256[4] memory input;
    input[0] = p1.X;
    input[1] = p1.Y;
    input[2] = p2.X;
    input[3] = p2.Y;
    bool success;
    // solium-disable-next-line security/no-inline-assembly
    assembly {
      success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)
    }
    if (!success) revert InvalidProof();
  }

  /// @return r the product of a point on G1 and a scalar, i.e.
  /// p == p.scalar_mul(1) and p.addition(p) == p.scalar_mul(2) for all points p.
  function scalar_mul(G1Point memory p, uint256 s) internal view returns (G1Point memory r) {
    // By EIP-196 the values p.X and p.Y are verified to less than the BASE_MODULUS and
    // form a valid point on the curve. But the scalar is not verified, so we do that explicitelly.
    if (s >= SCALAR_MODULUS) revert InvalidProof();
    uint256[3] memory input;
    input[0] = p.X;
    input[1] = p.Y;
    input[2] = s;
    bool success;
    // solium-disable-next-line security/no-inline-assembly
    assembly {
      success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)
    }
    if (!success) revert InvalidProof();
  }

  /// Asserts the pairing check
  /// e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1
  /// For example pairing([P1(), P1().negate()], [P2(), P2()]) should succeed
  function pairingCheck(G1Point[] memory p1, G2Point[] memory p2) internal view {
    // By EIP-197 all input is verified to be less than the BASE_MODULUS and form elements in their
    // respective groups of the right order.
    if (p1.length != p2.length) revert InvalidProof();
    uint256 elements = p1.length;
    uint256 inputSize = elements * 6;
    uint256[] memory input = new uint256[](inputSize);
    for (uint256 i = 0; i < elements; i++) {
      input[i * 6 + 0] = p1[i].X;
      input[i * 6 + 1] = p1[i].Y;
      input[i * 6 + 2] = p2[i].X[0];
      input[i * 6 + 3] = p2[i].X[1];
      input[i * 6 + 4] = p2[i].Y[0];
      input[i * 6 + 5] = p2[i].Y[1];
    }
    uint256[1] memory out;
    bool success;
    // solium-disable-next-line security/no-inline-assembly
    assembly {
      success := staticcall(sub(gas(), 2000), 8, add(input, 0x20), mul(inputSize, 0x20), out, 0x20)
    }
    if (!success || out[0] != 1) revert InvalidProof();
  }
}

contract Shuffle_encryptVerifier_30card {
  using Shuffle_encryptPairing_30card for *;

  struct VerifyingKey {
    Shuffle_encryptPairing_30card.G1Point alfa1;
    Shuffle_encryptPairing_30card.G2Point beta2;
    Shuffle_encryptPairing_30card.G2Point gamma2;
    Shuffle_encryptPairing_30card.G2Point delta2;
    Shuffle_encryptPairing_30card.G1Point[] IC;
  }

  struct Proof {
    Shuffle_encryptPairing_30card.G1Point A;
    Shuffle_encryptPairing_30card.G2Point B;
    Shuffle_encryptPairing_30card.G1Point C;
  }

  function verifyingKey() internal pure returns (VerifyingKey memory vk) {
    vk.alfa1 = Shuffle_encryptPairing_30card.G1Point(
      14378794661994809316668936077887579852844330409586136188493910229510707683568,
      19007180918058273234125706522281291487787880146734549337345180962710738215208
    );

    vk.beta2 = Shuffle_encryptPairing_30card.G2Point(
      [5920706861016946300912146506670818945013737603659177373891149557636543490740, 12055325713222300848813253111985210672218263044214498326157766255150057128762],
      [9700420230412290932994502491200547761155381189822684608735830492099336040170, 14277278647337675353039880797101698215986155900184787257566473040310971051502]
    );

    vk.gamma2 = Shuffle_encryptPairing_30card.G2Point(
      [11559732032986387107991004021392285783925812861821192530917403151452391805634, 10857046999023057135944570762232829481370756359578518086990519993285655852781],
      [4082367875863433681332203403145435568316851327593401208105741076214120093531, 8495653923123431417604973247489272438418190587263600148770280649306958101930]
    );

    vk.delta2 = Shuffle_encryptPairing_30card.G2Point(
      [14468022221564758796452809735525982644691892824571687373813909889748683900531, 10765826872687052051400058220988918858570073965116032338502382572159131121631],
      [14647465593248841415979422635639548691066898397172256837376198548487787342482, 3735879527477619953986645467738807171007805823539946470351737798060966715617]
    );

    vk.IC = new Shuffle_encryptPairing_30card.G1Point[](128);

    
      vk.IC[0] = Shuffle_encryptPairing_30card.G1Point(
        3680883020540079181106471764135528072469416498846769195229330341003273820467,
        15524280853138174585693778483205909518581511387236559960672938237832316898205
      );
    
      vk.IC[1] = Shuffle_encryptPairing_30card.G1Point(
        5428699452536072812564871285907892308278179105283412086881879760473423811072,
        5090395121556811671118121275642581984236821561283088177084423701042699836995
      );
    
      vk.IC[2] = Shuffle_encryptPairing_30card.G1Point(
        20152345217581551149862708354298291931538647610278476882192785820705922053472,
        2354656406734507541396230203651200452547008116903184721592279376402530271856
      );
    
      vk.IC[3] = Shuffle_encryptPairing_30card.G1Point(
        3749017086554631384862099818440720446238520157284097856692557687540932405285,
        1991905924693455935254287537441873525177262837311178486621191160442196769368
      );
    
      vk.IC[4] = Shuffle_encryptPairing_30card.G1Point(
        21153893019545437583742273386896576505879026550151449419148574297718001730958,
        13458703038246856211443893338387598606268749183937252249110252645408342960843
      );
    
      vk.IC[5] = Shuffle_encryptPairing_30card.G1Point(
        18885609387007289746183540709627296722250369052894053400342208761837560919412,
        10797302216540976873603265850036975780472163461199531012507189237864321546096
      );
    
      vk.IC[6] = Shuffle_encryptPairing_30card.G1Point(
        2454955294104503042085825681903618136830959649057095732172290873373157866914,
        8112397661555144592613094036546529560202218103856927247503934613476418663353
      );
    
      vk.IC[7] = Shuffle_encryptPairing_30card.G1Point(
        4842692782627371510612401099067195281385432438284942002045722374445356563608,
        3033076130802962903618730001908431780815391825653191709872660581575685440632
      );
    
      vk.IC[8] = Shuffle_encryptPairing_30card.G1Point(
        16856938034103222035982887337798499040931681615636366847456072215836813742960,
        20787388473227460432851125399271801896495665380631256800313406042552757069775
      );
    
      vk.IC[9] = Shuffle_encryptPairing_30card.G1Point(
        16607621888904810870206547373443323302122015810535537430438280313132043393102,
        15104921861797703739645862315678387950924366736619536093631999356066974191898
      );
    
      vk.IC[10] = Shuffle_encryptPairing_30card.G1Point(
        10102161561031541257301255676778278833381111661702353741625711665058877539593,
        13235610628605763544112014718153432961857326186256835260808905003992443895937
      );
    
      vk.IC[11] = Shuffle_encryptPairing_30card.G1Point(
        6920625596952157639977535693065667878466851113930888282795409391882176177193,
        18306497777487974869265835942921757038474200738542289691411037394482568331315
      );
    
      vk.IC[12] = Shuffle_encryptPairing_30card.G1Point(
        20336723126582677243126890431141447870364136118643065295633215335732515322817,
        4001317983295967452645734620366023767124488903069716357603156155182264896378
      );
    
      vk.IC[13] = Shuffle_encryptPairing_30card.G1Point(
        5854448232448702164011812681881723206707844766984753445394832401396853601837,
        20101344657251436071170375393272265307787840921844424389945004400005462720184
      );
    
      vk.IC[14] = Shuffle_encryptPairing_30card.G1Point(
        3151602423481114723249835516760343504864420247228624502637967592239881344775,
        1924165635609361808448578868332348696980577214556329933948450265840535868337
      );
    
      vk.IC[15] = Shuffle_encryptPairing_30card.G1Point(
        20120306377356644414008648386666255481318677298808344158959099566975249320537,
        4936087246699473032587288687394715862280883850036515848291993565306856227689
      );
    
      vk.IC[16] = Shuffle_encryptPairing_30card.G1Point(
        7589060037758202657659825492845354913117149308707005718648103453672072451252,
        3199356232650253906157281722946341062443919124350361523713610953249896616979
      );
    
      vk.IC[17] = Shuffle_encryptPairing_30card.G1Point(
        12633459715370415907429666566633064985703219849245059365065968715967268871024,
        16941813473422180915579794239097098116003753511011813747252952711452344636230
      );
    
      vk.IC[18] = Shuffle_encryptPairing_30card.G1Point(
        12304694218840020649015077968838874434313901758083891237813492054557984200126,
        9202541009932951335621223956253654745140252847738060838291805030968511762513
      );
    
      vk.IC[19] = Shuffle_encryptPairing_30card.G1Point(
        1809116351846906181613901500169139195075564423845403062434165625554267898517,
        3207846274726028102755478566322747595593768407804174029583450885749099094827
      );
    
      vk.IC[20] = Shuffle_encryptPairing_30card.G1Point(
        13292956527291399433435808208284334432570246401369152315891036284883143634241,
        13499208778815369939621712027596932966053089394057553580129082313120765309580
      );
    
      vk.IC[21] = Shuffle_encryptPairing_30card.G1Point(
        16427801216398090524248871374757083821169013840050760499065655043662694107321,
        19462303853257141169877293836351125755259527881560378318107151037759671947979
      );
    
      vk.IC[22] = Shuffle_encryptPairing_30card.G1Point(
        1459378226221385602447867433802748215435470205488518763568650816196569803806,
        21099430776089427914821649555325002720085552016210443600752044013667180304354
      );
    
      vk.IC[23] = Shuffle_encryptPairing_30card.G1Point(
        2262021078443648883448939318781898550268683868830028788150088809836382276960,
        15613069957066455953226460162132254024916881302046470067402557111596747414865
      );
    
      vk.IC[24] = Shuffle_encryptPairing_30card.G1Point(
        14944029226354637721329754923320262286342632745754764565371577093981015341425,
        6536940359881849438353810906403872837247776892412264960114286700699434956492
      );
    
      vk.IC[25] = Shuffle_encryptPairing_30card.G1Point(
        20043051363040561534774396711237198087927939569826217848578388578692384254584,
        9586569481939718328874892449981975568345856465619333436673142050913782326931
      );
    
      vk.IC[26] = Shuffle_encryptPairing_30card.G1Point(
        785637265562799038211247004519000549716278177354895774436474472402332213908,
        9383935530605000165467552285562384463685781307845674566618726488963565525424
      );
    
      vk.IC[27] = Shuffle_encryptPairing_30card.G1Point(
        10532866949812711248365281425408959044602840511041392229870410472480664556007,
        8710442852321230009112460685679052067403142390926261657065394073400087206513
      );
    
      vk.IC[28] = Shuffle_encryptPairing_30card.G1Point(
        9460048017904530976780192302546704994902961046784407864476932248398448665441,
        9901136966867257010009705992648408769941737955431571604420072060595456346162
      );
    
      vk.IC[29] = Shuffle_encryptPairing_30card.G1Point(
        14878994177784891362559669741348588852833702145900362247811261742325387032094,
        13290307725461661962355551698289890417337908329513730646332772882318710529923
      );
    
      vk.IC[30] = Shuffle_encryptPairing_30card.G1Point(
        11923841477327935171118683175647499235280964562785608661590332826178547375479,
        4943579717832374127295626922940918280576730244221213424744869308106479347714
      );
    
      vk.IC[31] = Shuffle_encryptPairing_30card.G1Point(
        16578513121840620994702828740453898872887626928495734688648590194950820226456,
        10874188677444298735483794393681182377666752584323055023089962946648545952497
      );
    
      vk.IC[32] = Shuffle_encryptPairing_30card.G1Point(
        7334308319845286663437476728787335742322320564271618101303279378087942404696,
        20080567063235740162066816694547986865250968370173375405528356822818810239154
      );
    
      vk.IC[33] = Shuffle_encryptPairing_30card.G1Point(
        9981919119780577807339691956982722996614388990178112376503274482320727978031,
        4910285021977800681935308820517914142722789234418447555669980563622626860714
      );
    
      vk.IC[34] = Shuffle_encryptPairing_30card.G1Point(
        18596202770279124442966924298590283239265785616998278605873674311828082887799,
        15887142434494736762290879074102697117314260642088267368663291418540308226900
      );
    
      vk.IC[35] = Shuffle_encryptPairing_30card.G1Point(
        2305965699146328044100732458124390561802927165162762191367088984596486343326,
        5939029849076771778715971679123326068408594280217913626806365470041296843923
      );
    
      vk.IC[36] = Shuffle_encryptPairing_30card.G1Point(
        6262409101558745145287429531782125159517626672575661913266302338578858657642,
        15240535145068490080633693791759025491672618177307449381044624431452011342292
      );
    
      vk.IC[37] = Shuffle_encryptPairing_30card.G1Point(
        12703985699714149630491835930323049486895594622331877054131110570663521241053,
        2230751850115555212290916156659659464773510616350711629264983071616836522460
      );
    
      vk.IC[38] = Shuffle_encryptPairing_30card.G1Point(
        21285709265689071432779593208397861034614652455394213560008427103620509558758,
        6448856373828288345846621841219593346509030356035275160370910231326046896933
      );
    
      vk.IC[39] = Shuffle_encryptPairing_30card.G1Point(
        13596163455897719486396541527557564234660091298366057987934289964953021597581,
        9799583126946510534825292716823628065133117714202053478092534802030952723793
      );
    
      vk.IC[40] = Shuffle_encryptPairing_30card.G1Point(
        16276927765159825987021689597577073326912369463497084056887494265163063185336,
        14365459646304427579469720886872055580546088299050144363039542983107142849503
      );
    
      vk.IC[41] = Shuffle_encryptPairing_30card.G1Point(
        17286334048783144122998876830896617601018963704465479862201943153717682687783,
        8769260495947309342616176972794285121506267443348499400666605560830907555073
      );
    
      vk.IC[42] = Shuffle_encryptPairing_30card.G1Point(
        13607582234637710167155416584594003020407362914268773908776044944503428637533,
        11146287163499969441909133653630537152397621444051664432432136171929425049545
      );
    
      vk.IC[43] = Shuffle_encryptPairing_30card.G1Point(
        5220191489881396572271128551067579240844563983160110755033177497171636287774,
        7126503683314331163409040104249893391700514708968920294504729118628801039542
      );
    
      vk.IC[44] = Shuffle_encryptPairing_30card.G1Point(
        6508164585728611202526629536028694329815290605725777583899340886079242691931,
        4242341798231472639087669980112034124482972696072691416577376432886147682131
      );
    
      vk.IC[45] = Shuffle_encryptPairing_30card.G1Point(
        2756129016100808401857331617583270391455658508095189374184287402679534064363,
        3835109368218762821877992178335062007587284012523680246189056651053776432504
      );
    
      vk.IC[46] = Shuffle_encryptPairing_30card.G1Point(
        13362061459022909873294028823845567656745238242685913597442823595255046713837,
        12619401341394928180841619092545034183378901779056320876413702842122844356081
      );
    
      vk.IC[47] = Shuffle_encryptPairing_30card.G1Point(
        1988981547921403137516792921093604400840983020381391929774251345106603772015,
        14198477619360350847076643109920003155858911570530515867002617157178693330698
      );
    
      vk.IC[48] = Shuffle_encryptPairing_30card.G1Point(
        2572517643308239458792213892413103397453674315719833407252531393062806980150,
        2061420966648711690304984469273837325769583013858024273657824237589638044841
      );
    
      vk.IC[49] = Shuffle_encryptPairing_30card.G1Point(
        11671597538834194361755517081418817489634163960477709674675473169563042171319,
        12686970423531131479011074977832802049680546171380187775973009891386052784058
      );
    
      vk.IC[50] = Shuffle_encryptPairing_30card.G1Point(
        337890777932401836998108105736945312101795547412502974955920965884235610415,
        13332640867540091915439275842580957895370673080843982226421960938630825582791
      );
    
      vk.IC[51] = Shuffle_encryptPairing_30card.G1Point(
        9944695211790291663802929474740625878748019533821649842666471510846726001212,
        21547906360555138125945839745546227415405932229414850223816122878939847092524
      );
    
      vk.IC[52] = Shuffle_encryptPairing_30card.G1Point(
        9318195514210376713282603767561547926175024113641103375958907173162358340762,
        9958148784334247864597870033035757394410893238570430688773541970407224890475
      );
    
      vk.IC[53] = Shuffle_encryptPairing_30card.G1Point(
        14898682518907622315810299583174448987000458346082132435852601942233368833373,
        5236059272128338580865237455049891877198119179413517927366573136064558811143
      );
    
      vk.IC[54] = Shuffle_encryptPairing_30card.G1Point(
        19591425419729927083682475838613796936852506363169203157505594404621463922007,
        10263600673403277147815948657592325036582036892296734790654152178052809215789
      );
    
      vk.IC[55] = Shuffle_encryptPairing_30card.G1Point(
        14841182207158343944885519124993822394368733978789463402772242790382252264025,
        17288267862121795216875679673623476828032281791826415326959541080899520255053
      );
    
      vk.IC[56] = Shuffle_encryptPairing_30card.G1Point(
        1479634589151769236685377562973718877384014571607478810199537778132686794992,
        12676485598457958084795786555036509428883653799519026230804721087476469725137
      );
    
      vk.IC[57] = Shuffle_encryptPairing_30card.G1Point(
        7077084675567935721323007198052842799375064485928853021099933355841072426106,
        9243132579914773967315422379010663137154611721275258451714788434908339186492
      );
    
      vk.IC[58] = Shuffle_encryptPairing_30card.G1Point(
        1163530245199127030731673857916694618371082079330498163965354585671712706044,
        10539142138474818509099638763573753872693086016786724923039306888388848453377
      );
    
      vk.IC[59] = Shuffle_encryptPairing_30card.G1Point(
        3530489765874129203341935098110644820678406642166890431728536535247581110442,
        14006798813416704976803367011149282105546859093134691645874169943021659832339
      );
    
      vk.IC[60] = Shuffle_encryptPairing_30card.G1Point(
        4657810976366752921714088740528255341890844889444167609104503140906485677381,
        18015096565965575537410091176803865732005310826725015243609833513936898583966
      );
    
      vk.IC[61] = Shuffle_encryptPairing_30card.G1Point(
        15003039902548589538616292153352383149046786507725309258572475228303518276594,
        11139715078781935739058368167350319064237852344902757517990828327460949976979
      );
    
      vk.IC[62] = Shuffle_encryptPairing_30card.G1Point(
        15620937370632043268991336714377955243636911300648895357257590777582519429735,
        18107284959676894187648663074906529916563784792959060524206713544334902869795
      );
    
      vk.IC[63] = Shuffle_encryptPairing_30card.G1Point(
        20338272608408608687867943155995741996545245782711378629034659843653997437455,
        14337108670152039043430341158891112867596920001928875878257700112163849788830
      );
    
      vk.IC[64] = Shuffle_encryptPairing_30card.G1Point(
        19846493124203782304562398187222215777323958860293002567179701259353816796649,
        18217480234276431039797623642891663707708301624692290139836772324126962898767
      );
    
      vk.IC[65] = Shuffle_encryptPairing_30card.G1Point(
        7368881100462367002601598467433413175101364583873328480047083735659695148098,
        12756032340874793996544928104673337972164343818896360560483571257373874307594
      );
    
      vk.IC[66] = Shuffle_encryptPairing_30card.G1Point(
        6181413506420350270850347752097373994394664131416179036381042969342055870968,
        7839209981395814065215315737847996256733721557133666213783649077507795155530
      );
    
      vk.IC[67] = Shuffle_encryptPairing_30card.G1Point(
        18686659506887456697881418662660739285233366653107008245634284576901272984387,
        5707879548258731999177614029726280972259700974922036750056620281726988722523
      );
    
      vk.IC[68] = Shuffle_encryptPairing_30card.G1Point(
        2144631600895801018507295546267090673643270917847877596158469161866629711986,
        6778632964668681884974852436003685521047017925857220117741004372515331638066
      );
    
      vk.IC[69] = Shuffle_encryptPairing_30card.G1Point(
        4697267507481628906855978012849545667969209089994468902357243401354308137771,
        14702816531287569772684647982646717403755280558039759050765703893437477640214
      );
    
      vk.IC[70] = Shuffle_encryptPairing_30card.G1Point(
        12443270456973366267681684039390046249494309622096406936453063070443952112174,
        5970722535000159072111065882036566539435618753132551020597906126523011966109
      );
    
      vk.IC[71] = Shuffle_encryptPairing_30card.G1Point(
        5792430015325748832741207686220279210469234844158082275816733147577538645961,
        14233621859219342741043044951442069364180863281569416248957473943333065789091
      );
    
      vk.IC[72] = Shuffle_encryptPairing_30card.G1Point(
        19557800789360848487826595965567791316222198136475707362185063139343677383042,
        11075653165887817535996535958608585446699595967619765043739171997209789419971
      );
    
      vk.IC[73] = Shuffle_encryptPairing_30card.G1Point(
        10328832874690793792941736361587121448038593594917476573522274420928697885258,
        16363762553392367079451974058396933399872813220075621318035437377041461146504
      );
    
      vk.IC[74] = Shuffle_encryptPairing_30card.G1Point(
        7293835146337237458887089537817862748587208389203729279872274752019323295905,
        6775122616313078975965854247787623590312890641459323564935318276506396666046
      );
    
      vk.IC[75] = Shuffle_encryptPairing_30card.G1Point(
        1604882387831624452199321487597385498675260410502995092485906114643301355137,
        11294749330573046320253620741144480724429323139929543016057593595288390667930
      );
    
      vk.IC[76] = Shuffle_encryptPairing_30card.G1Point(
        10646456632771078912178191311195930757413115761886131105861972354088388452644,
        8636961536910995465247104116603947151079554856049784540696328161949374321907
      );
    
      vk.IC[77] = Shuffle_encryptPairing_30card.G1Point(
        18420255488953080957152559912938723562375002137197625469266543608998387636144,
        13496068683979533783312898090326451769801419519426174522714789340184557658671
      );
    
      vk.IC[78] = Shuffle_encryptPairing_30card.G1Point(
        20661072290628365876142814242523236407138091230885226558173190739876371011050,
        20429048168605050547909388515744746746236363070774330025262328286339837743403
      );
    
      vk.IC[79] = Shuffle_encryptPairing_30card.G1Point(
        6131347031938754284558433490680619069520868005410302651395885468113362403746,
        10712624743688678347115955248974832978044456005049298263106477828118598420972
      );
    
      vk.IC[80] = Shuffle_encryptPairing_30card.G1Point(
        19760212279836104922041366576457827425207733199421348740682727130295579861718,
        17782699640612193593950598051770275378218285408885954671377040642700635172869
      );
    
      vk.IC[81] = Shuffle_encryptPairing_30card.G1Point(
        9457447766430702878263829057049433024319486633145585867420766147790118520981,
        7221901181211323879649442775381670450793515375958526589503445583951915749819
      );
    
      vk.IC[82] = Shuffle_encryptPairing_30card.G1Point(
        13997117863206875956364507643480374360244275553505760175995739191178628101187,
        20028601152209102450597742470334452281150823590502364714011384958481760354360
      );
    
      vk.IC[83] = Shuffle_encryptPairing_30card.G1Point(
        9954572742573505830703620976540311715909366911615292872141712031898114775528,
        5412421544154934063415501194196898019633828677471915891234887233409698445840
      );
    
      vk.IC[84] = Shuffle_encryptPairing_30card.G1Point(
        7683237203324419155955169760460376460308996038370578495838672159355355436214,
        4024270725250796355790174998610184676834931499781693632775281869843162469930
      );
    
      vk.IC[85] = Shuffle_encryptPairing_30card.G1Point(
        12485930175676326789693082418591822737363973082219395810830508395608265185913,
        16929477281414164050792873553932720572098942585580818601986177876273781616271
      );
    
      vk.IC[86] = Shuffle_encryptPairing_30card.G1Point(
        14010894980101809802274497146262689534553016565530306519750432768935795036768,
        15381113249627162535609604845038887423150134083690673965025082162806008116831
      );
    
      vk.IC[87] = Shuffle_encryptPairing_30card.G1Point(
        6430792801044460202327192918710207590924207331044819714303818266840419225289,
        5920221609129938574081230865258240126942424996685634807525729965794214373016
      );
    
      vk.IC[88] = Shuffle_encryptPairing_30card.G1Point(
        12818432376597182888586083413468626203016377025360883610718837552059522295081,
        19881051538081545233625962170121468852804064783718804668915198220666005560421
      );
    
      vk.IC[89] = Shuffle_encryptPairing_30card.G1Point(
        7027486152883235880092754247940806657821177179580018780467923642745445761193,
        20189066635027964357937654857144787064320443874856990186634362339607150853600
      );
    
      vk.IC[90] = Shuffle_encryptPairing_30card.G1Point(
        6622249813687920043453009255515923100501025170798665106141483277113741367357,
        11657136318243609072828627521988797670465852120578475289521975142177786538131
      );
    
      vk.IC[91] = Shuffle_encryptPairing_30card.G1Point(
        12405119476054044232828815079476408615745007211562970791850713624342589297675,
        15060829861403497607200225974690075677010762423736414365967289763995329670359
      );
    
      vk.IC[92] = Shuffle_encryptPairing_30card.G1Point(
        14878909078767442250478244102370423209587758054941914437006813569577963485853,
        10700610859870429480593095002444096237832130300506210372819233040069052727231
      );
    
      vk.IC[93] = Shuffle_encryptPairing_30card.G1Point(
        13027164552592898563541932409924871598981559469823262625292374404784641769795,
        18760021277125335480649556850473777403657760128665507158762607039640083596599
      );
    
      vk.IC[94] = Shuffle_encryptPairing_30card.G1Point(
        17183294794690293390453794757855267580874193482903105330183405002936626483352,
        18340377595747943130181952963682062798939850751536182576362887672873017286802
      );
    
      vk.IC[95] = Shuffle_encryptPairing_30card.G1Point(
        1306094624556962102189417949919069593243383307314462932570320196617138921348,
        14173315408610625959749543380526494809592478239080959639056034494950401590647
      );
    
      vk.IC[96] = Shuffle_encryptPairing_30card.G1Point(
        4525634976217250558903799727349318983980478892999836255857594213783996749360,
        11275359678113796282155324113365827856319233841311381421060304882538448920793
      );
    
      vk.IC[97] = Shuffle_encryptPairing_30card.G1Point(
        6490448535674900933025106717062046001908892251039483016364147974257121745965,
        17006934334180870608334733994337914708964942831515853148527361648724488873080
      );
    
      vk.IC[98] = Shuffle_encryptPairing_30card.G1Point(
        4734413191614174323441878709511907507143211398053863659542551327941902082752,
        1797980534206201001922844502857876944516863349624515005693659510018329117980
      );
    
      vk.IC[99] = Shuffle_encryptPairing_30card.G1Point(
        15963644994061267670068053951481124154017550379177974871608725040161793641882,
        3857773149954562080817722462103120929696017963520284499685226750166843397273
      );
    
      vk.IC[100] = Shuffle_encryptPairing_30card.G1Point(
        4096046614801175110713757625095939710580270655009904883586840560258896340612,
        15073799202310692381037412047875737645450950260316749199438590115502410627361
      );
    
      vk.IC[101] = Shuffle_encryptPairing_30card.G1Point(
        10351441348096037113745075081557290387000325945343232774150825829702954686530,
        5870465374286436779262085974158527654745902883476757452759708288644904498405
      );
    
      vk.IC[102] = Shuffle_encryptPairing_30card.G1Point(
        2101125117393087232191575290272806028329031411934982293286916758554232237746,
        9775356652075109862443915697332609782187032588568414636523352858720843291229
      );
    
      vk.IC[103] = Shuffle_encryptPairing_30card.G1Point(
        7830876847299569518788624490511609385993843619667058711590923623925646103903,
        21235258059980724719708570923664243452349296041996105678594994299753149024295
      );
    
      vk.IC[104] = Shuffle_encryptPairing_30card.G1Point(
        18453404779159865596626588263607801399030694526458052513254522315527747528551,
        5914665769033846799539567301368647168536356275211808971405293442165424518625
      );
    
      vk.IC[105] = Shuffle_encryptPairing_30card.G1Point(
        2576218298928506475656718675517483769284997359146721170714974343152363283753,
        6855272294943131820116240214926311127324521185650105035537374528931817030389
      );
    
      vk.IC[106] = Shuffle_encryptPairing_30card.G1Point(
        15028896521852002591051289128717618271903196668226822134343365360562619570587,
        7081541631817887481902819693148357685492892439339808745096117377597251074056
      );
    
      vk.IC[107] = Shuffle_encryptPairing_30card.G1Point(
        17088278557810402604654225568585517339061726533318943661832219356444434354387,
        14431380301479057833313540782643894841308166275107344337870875348318543809043
      );
    
      vk.IC[108] = Shuffle_encryptPairing_30card.G1Point(
        2944195520871512694740690385125253959063971965024998434908912893980914616865,
        17882757352944244410106629330072714509813152853814728405696900310594419856254
      );
    
      vk.IC[109] = Shuffle_encryptPairing_30card.G1Point(
        18955138147443151568980749964581009595322285993968837559434131506305689490729,
        13808227307692930607395498666356209996010225468587929779194126298363639794852
      );
    
      vk.IC[110] = Shuffle_encryptPairing_30card.G1Point(
        13714841431434654853587623895811268330624568014112686319816824261662484585034,
        16512814569719110968140555273685022911180347248623697372115593096718759119006
      );
    
      vk.IC[111] = Shuffle_encryptPairing_30card.G1Point(
        10838754163146070053241780731477128645136775280858137438931202201114264522124,
        15865144148357109961975501115100674677231723616466216516244244209001812751537
      );
    
      vk.IC[112] = Shuffle_encryptPairing_30card.G1Point(
        10151747045206367462587644907971434979643216608561122559429243733162348745850,
        19271775574150644654048947904504411165283855031645940459628188283091118506376
      );
    
      vk.IC[113] = Shuffle_encryptPairing_30card.G1Point(
        9300275403590583870607548215431168858809545045767461168853666481230789725581,
        15432154237978146435062778974583524016820451353277673433530522234219307518508
      );
    
      vk.IC[114] = Shuffle_encryptPairing_30card.G1Point(
        19098636810768776983132835212123475066729159288046460185924263494613224886255,
        8272790837265974878415947393650489085341651045822024752827324135821046874044
      );
    
      vk.IC[115] = Shuffle_encryptPairing_30card.G1Point(
        21088391123170610860869577283883803898076791092377040005646249103577123312285,
        15606153606138606889439215643872800871881603702362198360375280483701138337829
      );
    
      vk.IC[116] = Shuffle_encryptPairing_30card.G1Point(
        3135959473581709116776063829777399149043480906328425093998249556908261447854,
        1760901624045338663323302211055554905456821137671187183900561454864515836821
      );
    
      vk.IC[117] = Shuffle_encryptPairing_30card.G1Point(
        18883956918158939384296306619059391768616548150543669517365827307356747996567,
        13674204218970512007308921399826434892822800043745369952112609389092579997458
      );
    
      vk.IC[118] = Shuffle_encryptPairing_30card.G1Point(
        9961100605779189566681319847542072964519066793064143686536177181704556938649,
        7996805905664370095350253330365071310169926695581349133943906620289534884660
      );
    
      vk.IC[119] = Shuffle_encryptPairing_30card.G1Point(
        20237405283549077455864240347897252646103717227858231566485282868666319080930,
        8752925467958188227758054627571419443087999618573715092668693931410357600768
      );
    
      vk.IC[120] = Shuffle_encryptPairing_30card.G1Point(
        1576124894838558788245082253107823424151655259604169790404240832359578544332,
        6862046589174712777834228734949318447265719777197130213128128488204539414526
      );
    
      vk.IC[121] = Shuffle_encryptPairing_30card.G1Point(
        10771820299813686784694447675197131533467940856996933986146159192692711093622,
        11248626960634183804442519161728775277205453176315060047547085328879057667802
      );
    
      vk.IC[122] = Shuffle_encryptPairing_30card.G1Point(
        6355726427914407853072284973106239392174664041237728568730671124167458964940,
        16759478945581083489309271144099459113373702465020118934862821285009015634776
      );
    
      vk.IC[123] = Shuffle_encryptPairing_30card.G1Point(
        9662567813772365302209275682307978109843532330251331641343611586774642737955,
        12976230330559016779131070652826444398087161035844079945958354015887818063921
      );
    
      vk.IC[124] = Shuffle_encryptPairing_30card.G1Point(
        13394920440175065293945892855790231404080120115151503703205788840957908599401,
        20231639726028648803481116098029334555527334076016231697027394010058612960872
      );
    
      vk.IC[125] = Shuffle_encryptPairing_30card.G1Point(
        2674448949804324964472572142372198758424536930769412585881974967228763026497,
        10232060348923984501254201555320078325376597926484841546726999322966057813398
      );
    
      vk.IC[126] = Shuffle_encryptPairing_30card.G1Point(
        7470367879786949475374352532829062503945044556754582026447072199213819089157,
        7771462117769672853887526040649732979914935544650636342357412875411940529992
      );
    
      vk.IC[127] = Shuffle_encryptPairing_30card.G1Point(
        12249514898875824323306592216982917235001530306601271895312726573988992192759,
        1398870211259425234507145978143656644267834535947135194018117483287647696369
      );
    
  }

  /// @dev Verifies a Semaphore proof. Reverts with InvalidProof if the proof is invalid.
  function verifyProof(
    uint[2] memory a,
    uint[2][2] memory b,
    uint[2] memory c,
    uint[] memory input
  ) public view {
    // If the values are not in the correct range, the Shuffle_encryptPairing_30card contract will revert.
    Proof memory proof;
    proof.A = Shuffle_encryptPairing_30card.G1Point(a[0], a[1]);
    proof.B = Shuffle_encryptPairing_30card.G2Point([b[0][0], b[0][1]], [b[1][0], b[1][1]]);
    proof.C = Shuffle_encryptPairing_30card.G1Point(c[0], c[1]);

    VerifyingKey memory vk = verifyingKey();

    // Compute the linear combination vk_x of inputs times IC
    if (input.length + 1 != vk.IC.length) revert Shuffle_encryptPairing_30card.InvalidProof();
    Shuffle_encryptPairing_30card.G1Point memory vk_x = vk.IC[0];
    for (uint i = 0; i < input.length; i++) {
      vk_x = Shuffle_encryptPairing_30card.addition(vk_x, Shuffle_encryptPairing_30card.scalar_mul(vk.IC[i+1], input[i]));
    }

    // Check pairing
    Shuffle_encryptPairing_30card.G1Point[] memory p1 = new Shuffle_encryptPairing_30card.G1Point[](4);
    Shuffle_encryptPairing_30card.G2Point[] memory p2 = new Shuffle_encryptPairing_30card.G2Point[](4);
    p1[0] = Shuffle_encryptPairing_30card.negate(proof.A);
    p2[0] = proof.B;
    p1[1] = vk.alfa1;
    p2[1] = vk.beta2;
    p1[2] = vk_x;
    p2[2] = vk.gamma2;
    p1[3] = proof.C;
    p2[3] = vk.delta2;
    Shuffle_encryptPairing_30card.pairingCheck(p1, p2);
  }
}
